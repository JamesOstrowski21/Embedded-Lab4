
AVRASM ver. 2.2.8  C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm Tue Apr 04 10:16:34 2023

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(25): warning: Register r26 already defined by the .DEF directive
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(26): warning: Register r27 already defined by the .DEF directive
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(27): warning: Register r27 already defined by the .DEF directive
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(28): warning: Register r28 already defined by the .DEF directive
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Lab 4.asm
                                 ;
                                 ; Created: 3/28/2023 12:05:42 PM
                                 ; Authors : James Ostrowski and Kai Lindholm 
                                 ;
                                 
                                 .include "m328Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 .cseg
                                 
                                 ;
                                 .org 0x0000
000000 c031                      	rjmp RESET
                                 
                                 .org 0x0002				; Toggle Fan State 
000002 c068                      	rjmp INT0_vect
                                 
                                 .org 0x0006				; Update Duty Cycle 
000006 c071                      	rjmp PCINT0_INT 
                                 
                                 .org 0x0020				; TOV0 interrupt
000020 c051                      	rjmp TOV0_INT
                                 
                                 
                                 .def	drem8u	= r26		;remainder
                                 .def	dres8u	= r27		;result
                                 .def	dd8u	= r27		;dividend
                                 .def	dv8u	= r28		;divisor
                                 
                                 .def temp = r18
                                 .def value = r20		; Current value of rpg, used to calc duty cycle
                                 .def input = r22		; State of the rpg 	
                                 .def fanBool = r19		; state of the fan 
                                 .def rpgStates = r17
                                 .def update = r24
                                 .def delayLength = r23
                                 .def rpgInterruptCount = r25
                                 .def prevValue = r15
000021 c010                      rjmp RESET
                                 
000022 4344
000023 3d20
000024 0020                      msg1: .db "DC = ", 0x00
000025 6146
000026 206e
000027 203d
000028 4e4f
000029 0020
C:\Users\kaili\OneDrive\Documents\Spring2023\Embedded\Embedded-Lab4\Lab 4\Lab 4\main.asm(42): warning: .cseg .db misalignment - padding zero byte
00002a 0000                      msg2: .db "Fan = ON ", 0x00, 0
00002b 6146
00002c 206e
00002d 203d
00002e 464f
00002f 0046                      msg3: .db "Fan = OFF", 0x00
000030 2520
000031 0020                      msg4: .db " % ", 0x00
                                 
                                 RESET:
000032 94f8                      	cli
000033 ef2f                      	ldi		temp, LOW(RAMEND)
000034 bf2d                      	out		SPL, temp
000035 e028                      	ldi		temp, HIGH(RAMEND)
000036 bf2e                      	out		SPH, temp
000037 e030                      	ldi		fanBool, 0			; fans initial state is off
000038 e080                      	ldi		update, 0
                                 
                                 ;---------------------PIN CONFIGURATION-------------------------
000039 2700                      	clr		r16							; reset r16
00003a e208                      	ldi		r16, (1<<DDB3) | (1<<DDB5)	; set pins 3 and 5 as outputs for the LCD
00003b b904                      	out		DDRB, r16
00003c 9820                      	cbi		DDRB, 0
00003d 9821                      	cbi		DDRB, 1 
00003e 9822                      	cbi		DDRB, 2
00003f 9a24                      	sbi		DDRB, 4
000040 e12c                      	ldi		temp, (1<<PB2) | (1<<PB4) | (1<<PB3)
000041 b925                      	out		PORTB, temp					; enable pullup for pinb 2
000042 e024                      	ldi		temp, (1<<PD2)
000043 b92b                      	out		PORTD, temp
000044 e028                      	ldi		temp, (1<<PD3)
000045 b92a                      	out		DDRD, temp					; enable OCRB output 
                                 	
                                 ;--------------------Setup pin interrupts------------------------	
                                 	// PCINT0-1 - RPG interrupts
                                 	// INT0	- PB  interrupt
000046 e021                      	ldi		temp, (1<<INT0)
000047 bb2d                      	out		EIMSK, temp
000048 e022                      	ldi		temp, 0x02
000049 9320 0069                 	sts		EICRA, temp
                                 
00004b e021                      	ldi		temp, (1<<PCIE0)
00004c 9320 0068                 	sts		PCICR, temp
00004e e023                      	ldi		temp, (1<<PCINT0) | (1<<PCINT1)
00004f 9320 006b                 	sts		PCMSK0, temp
                                 
                                 ;--------------- Initialize Timer/Counter for fast PWM mode --------------
000051 e223                      	ldi		temp,  (1<<COM2B1) |(1<<WGM21) | (1<<WGM20)
000052 9320 00b0                 	sts		TCCR2A, temp								; set to fast non-inverting PWM mode with OC2A as TOP
                                 
000054 e029                      	ldi		temp,  (1 << WGM22) |(1 << CS20) 
000055 9320 00b1                 	sts		TCCR2B, temp								; set the OC2RA as TOP and 1-prescaling
                                 
000057 ec28                      	ldi		temp, 200									; top value, this allows 0-199 steps in duty cycle. or 200 total steps 
000058 9320 00b3                 	sts		OCR2A, temp			
                                 			
00005a e94c                      	ldi		value, 156									; Set the starting duty cycle
00005b 2f24                      	mov		temp, value
00005c 9320 00b4                 	sts		OCR2B, temp
                                 
                                 	;ldi		temp, (1<<OCIE2A)| (1<<OCIE2B) | (1 << TOIE2)	; enable T/C2 interrupts 
                                 	;sts		TIMSK2, temp
                                 
                                 ;--------------Enable T/C0 for delays-------------------------------------
00005e e023                      	ldi		temp, (1<<CS01) | (1<<CS00)
00005f bd25                      	out		TCCR0B, temp	; Timer clock = system clock / 64
000060 d0b1                      	rcall LCDinit
                                 
                                 
000061 9478                      sei
000062 d067                      rcall updateDC
000063 d071                      rcall fanON
                                 	
                                 main: 
000064 fd80                      	sbrc	update, 0
000065 c034                      	rjmp	ToggleFan
000066 fd81                      	sbrc	update, 1 
000067 c01e                      	rjmp	incrementDC 
000068 fd82                      	sbrc	update, 2 
000069 c026                      	rjmp	decrementDC
                                 	
00006a cff9                      	rjmp main
                                 INT0_vect: 
00006b e32f                      	ldi		temp, SREG		; save state of SREG
00006c 932f                      	push	temp
00006d 94f8                      	cli 
00006e e081                      	ldi		update, 0x01
                                 
00006f e021                      	ldi		temp, 0x01
000070 2732                      	eor		fanBool, temp
                                 
000071 c054                      	rjmp	intDONE			 
                                 
                                 TOV0_INT:
000072 e32f                      	ldi		temp, SREG		; save state of SREG
000073 932f                      	push	temp
000074 94f8                      	cli 
000075 e021                      	ldi		temp, (1 << TOV0)
000076 bb25                      	out		TIFR0, temp		; Clear TOV0 / clear pending interrupts 
000077 c04e                      	rjmp	intDONE		
                                 		 
                                 PCINT0_INT:
000078 94f8                      	cli 
000079 e063                      	ldi		input, PINB		; read state of PINB
00007a 7063                      	andi	input, 0x03		; mask out PINA and PINB
00007b 2b16                      	or		rpgStates, input
00007c 0f11                      	lsl		rpgStates
00007d 0f11                      	lsl		rpgStates
                                 
00007e 9593                      	inc		rpgInterruptCount 
00007f 3094                      	cpi		rpgInterruptCount, 4
000080 f009                      	breq	rpgUpdate
                                 	
000081 c044                      	rjmp	intDONE
                                 
                                 rpgUpdate: 
000082 ff17                      	sbrs	rpgStates, 7
000083 6082                      	ori		update, (1<<1)	; 
000084 6084                      	ori		update, (1<<2)	; 
000085 c040                      	rjmp	intDONE
                                 
                                 incrementDC:
000086 e020                      	ldi		temp, 0x00		; turn RPG interrupts off
000087 9320 006b                 	sts		PCMSK0, temp
                                 
000089 e025                      	ldi		temp, 5
00008a 0f42                      	add		value, temp
                                 	// determine digits to display
                                 	;rcall	updateDisplay
                                 	
00008b e080                      	ldi		update, (0<<1)	; set the second bit to a 0 
                                 
00008c e023                      	ldi		temp, 0x03		; turn RPG interrupts back on
00008d 9320 006b                 	sts		PCMSK0, temp
                                 
00008f cfd4                      	rjmp	main
                                 
                                 
                                 decrementDC:
000090 e020                      	ldi		temp, 0x00		; turn RPG interrupts off
000091 9320 006b                 	sts		PCMSK0, temp
                                 
000093 e025                      	ldi		temp, 5
000094 1b42                      	sub		value, temp
                                 	// determine digits to display
                                 ;	rcall	updateDisplay
                                 	
000095 e080                      	ldi		update, (0<<2)	; set the third bit to a 0 
                                 	
000096 e023                      	ldi		temp, 0x03		; turn RPG interrupts back on
000097 9320 006b                 	sts		PCMSK0, temp
                                 	
000099 cfca                      	rjmp	main
                                 		  
                                 ToggleFan:
00009a 94f8                      	cli
00009b e080                      	ldi update, 0
00009c 3031                      	cpi fanBool, 1 
00009d f099                      	breq turnFanOn
00009e 3030                      	cpi fanbool, 0
00009f f019                      	breq turnFanOff
0000a0 9478                      	sei
0000a1 940c 0064                 	jmp main
                                 
                                 turnFanOff:
0000a3 982c                      	cbi		PORTB, PB4 
0000a4 e020                      	ldi		temp, 0
0000a5 2ef4                      	mov		prevValue, value 
0000a6 e14e                      	ldi		value, 30
0000a7 d034                      	rcall	fanOFF
0000a8 d0bb                      	rcall	displayDC
0000a9 9320 00b4                 	sts		OCR2B, temp		
0000ab 2722                      	clr		temp
0000ac e020                      	ldi		temp, 0x00		; turn RPG interrupts off. Keep button interrupts
0000ad 9320 006b                 	sts		PCMSK0, temp
0000af 9478                      	sei
0000b0 cfb3                      	rjmp	main
                                 
                                 turnFanOn: 
0000b1 9a2c                      	sbi		PORTB, PB4
0000b2 e023                      	ldi		temp, 0x03		; turn RPG control back on
0000b3 9320 006b                 	sts		PCMSK0, temp
0000b5 2d4f                      	mov		value, prevValue
0000b6 d0ad                      	rcall	displayDC
0000b7 d01d                      	rcall	fanON
0000b8 3342                      	cpi		value, 50		; check if DC > 25%
0000b9 d002                      	rcall	rampUp
0000ba 9478                      	sei
0000bb cfa8                      	rjmp	main
                                 
                                 
                                 rampUp: 
0000bc ec28                      	ldi		temp, 200		; ramp fan up to 25% DC 
0000bd 9320 00b4                 	sts		OCR2B, temp		
0000bf 0000                      	nop
0000c0 0000                      	nop
0000c1 0000                      	nop
0000c2 9340 00b4                 	sts		OCR2B, value		; bring fan speed back to previous state	
                                 	
0000c4 9478                      	sei
0000c5 9508                      	ret
                                 
                                 intDONE:
0000c6 912f                      	pop temp
0000c7 bf2f                      	out SREG, temp	; return the state of the SREG
0000c8 9478                      	sei 
0000c9 9518                      	reti
                                 
                                 updateDC:
0000ca 9a2d                      	sbi PORTB, PB5
0000cb e085                      	ldi r24, 5
0000cc e4e4                      	ldi r30,LOW(2*msg1) ; Load Z register low
0000cd e0f0                          ldi r31,HIGH(2*msg1) ; Load Z register high
0000ce d031                          rcall displayCString	
0000cf d094                      	rcall displayDC
0000d0 e083                      	ldi r24, 3
0000d1 e6e0                      	ldi r30,LOW(2*msg4) ; Load Z register low
0000d2 e0f0                          ldi r31,HIGH(2*msg4) ; Load Z register high
0000d3 d02c                          rcall displayCString
0000d4 9508                      	ret
                                 
                                 fanON:
0000d5 d01b                      	rcall SecondLine
0000d6 e089                      	ldi r24, 9
0000d7 e4ea                      	ldi r30,LOW(2*msg2) ; Load Z register low
0000d8 e0f0                          ldi r31,HIGH(2*msg2) ; Load Z register high
0000d9 d026                      	rcall displayCString
0000da d008                      	rcall Firstline
0000db 9508                      	ret
                                 
                                 fanOFF:
0000dc d014                      	rcall SecondLine
0000dd e089                      	ldi r24, 9
0000de e5e6                      	ldi r30,LOW(2*msg3) ; Load Z register low
0000df e0f0                          ldi r31,HIGH(2*msg3) ; Load Z register high
0000e0 d01f                      	rcall displayCString
0000e1 d001                      	rcall Firstline
0000e2 9508                      	ret
                                 
                                 Firstline:
0000e3 982d                      	cbi PORTB, PB5
0000e4 e010                      	ldi r17, 0x00
0000e5 b918                      	out PORTC, r17
0000e6 0000                      	nop
0000e7 d025                      	rcall LCDStrobe
0000e8 d0f8                      	rcall delay_ms
0000e9 d0f7                      	rcall delay_ms
                                 
0000ea e012                      	ldi r17, 0x02
0000eb b918                      	out PORTC, r17
0000ec 0000                      	nop
0000ed d01f                      	rcall LCDStrobe
0000ee d0f2                      	rcall delay_ms
0000ef d0f1                      	rcall delay_ms
0000f0 9508                      	ret
                                 
                                 Secondline:
0000f1 982d                      	cbi PORTB, PB5
0000f2 e01c                      	ldi r17, 0x0C
0000f3 b918                      	out PORTC, r17
0000f4 0000                      	nop
0000f5 d017                      	rcall LCDStrobe
0000f6 d0ea                      	rcall delay_ms
0000f7 d0e9                      	rcall delay_ms
0000f8 e010                      	ldi r17, 0x00
0000f9 b918                      	out PORTC, r17
0000fa 0000                      	nop
0000fb d011                      	rcall LCDStrobe
0000fc d0e4                      	rcall delay_ms
0000fd d0e3                      	rcall delay_ms
0000fe 9a2d                      	sbi PORTB, PB5
0000ff 9508                      	ret
                                 
                                 displayCString:
                                 L20:
000100 95c8                      	lpm ; r0 <-- first byte
000101 9402                      	swap r0 ; Upper nibble in place
000102 b808                      	out PORTC,r0 ; Send upper nibble out
000103 d009                      	rcall LCDStrobe ; Latch nibble
000104 d0dc                      	rcall delay_ms ; Wait
000105 9402                      	swap r0 ; Lower nibble in place
000106 b808                      	out PORTC,r0 ; Send lower nibble out
000107 d005                      	rcall LCDStrobe ; Latch nibble
000108 d0d8                      	rcall delay_ms ; Wait
000109 9631                      	adiw zh:zl,1 ; Increment Z pointer
00010a 958a                      	dec r24 ; Repeat until
00010b f7a1                      	brne L20 ; all characters are out
00010c 9508                      	ret
                                 
                                 LCDStrobe:
00010d 9a2b                      	sbi PORTB, PB3
00010e d0d2                      	rcall delay_ms
00010f d0d1                      	rcall delay_ms
000110 982b                      	cbi PORTB, PB3
000111 9508                      	ret
                                 
                                 LCDinit:
000112 e208                      	ldi r16, 0x28 ;all 1s in B
000113 b904                      	out DDRB, r16
                                 
000114 ef0f                      	ldi r16, 0xFF ;all 1s in C
000115 b907                      	out DDRC, r16
                                 
000116 e605                      	ldi r16, 0x65 ;100 ms
000117 d0be                      	rcall delay_mms
                                 
000118 e013                      	ldi r17, 0x03 ;8 bit mode 
000119 b918                      	out PORTC, r17
00011a dff2                      	rcall LCDStrobe
00011b e005                      	ldi r16, 5 ; 
00011c d0b9                      	rcall delay_mms;8 bit mode, DB3 and DB2 high
00011d b918                      	out PORTC, r17
00011e dfee                      	rcall LCDStrobe;pulse enable to change mode
00011f e001                      	ldi r16, 1 ; >200us
000120 d0b5                      	rcall delay_mms;8 bit mode, DB3 and DB2 high
000121 b918                      	out PORTC, r17
000122 dfea                      	rcall LCDStrobe;pulse enable to change mode
000123 e006                      	ldi r16, 6 ; >200us
000124 d0b1                      	rcall delay_mms
                                 	
                                 
000125 e012                      	ldi r17, 0x02 ; 4 bit mode
000126 b918                      	out PORTC, r17
000127 0000                      	nop
000128 dfe4                      	rcall LCDStrobe
000129 e006                      	ldi r16, 6
00012a d0ab                      	rcall delay_mms
                                 
00012b e012                      	ldi r17, 0x02
00012c b918                      	out PORTC, r17
00012d 0000                      	nop
00012e dfde                      	rcall LCDStrobe
00012f d0b1                      	rcall delay_ms
000130 d0b0                      	rcall delay_ms
000131 e018                      	ldi r17, 0x08
000132 b918                      	out PORTC, r17
000133 0000                      	nop
000134 dfd8                      	rcall LCDStrobe
000135 d0ab                      	rcall delay_ms
000136 d0aa                      	rcall delay_ms
                                 
000137 e010                      	ldi r17, 0x00
000138 b918                      	out PORTC, r17
000139 0000                      	nop
00013a dfd2                      	rcall LCDStrobe
00013b d0a5                      	rcall delay_ms
00013c d0a4                      	rcall delay_ms
00013d e018                      	ldi r17, 0x08
00013e b918                      	out PORTC, r17
00013f 0000                      	nop
000140 dfcc                      	rcall LCDStrobe
000141 d09f                      	rcall delay_ms
000142 d09e                      	rcall delay_ms
                                 
000143 e010                      	ldi r17, 0x00
000144 b918                      	out PORTC, r17
000145 0000                      	nop
000146 dfc6                      	rcall LCDStrobe
000147 d099                      	rcall delay_ms
000148 d098                      	rcall delay_ms
000149 e011                      	ldi r17, 0x01
00014a b918                      	out PORTC, r17
00014b 0000                      	nop
00014c dfc0                      	rcall LCDStrobe
00014d d093                      	rcall delay_ms
00014e d092                      	rcall delay_ms
                                 
00014f e010                      	ldi r17, 0x00
000150 b918                      	out PORTC, r17
000151 0000                      	nop
000152 dfba                      	rcall LCDStrobe
000153 d08d                      	rcall delay_ms
000154 e016                      	ldi r17, 0x06
000155 b918                      	out PORTC, r17
000156 0000                      	nop
000157 dfb5                      	rcall LCDStrobe
000158 d088                      	rcall delay_ms
                                 
000159 e010                      	ldi r17, 0x00
00015a b918                      	out PORTC, r17
00015b 0000                      	nop
00015c dfb0                      	rcall LCDStrobe
00015d d083                      	rcall delay_ms
00015e e01c                      	ldi r17, 0x0C
00015f b918                      	out PORTC, r17
000160 0000                      	nop
000161 dfab                      	rcall LCDStrobe
000162 d07e                      	rcall delay_ms
000163 9508                      	ret
                                 
                                 displayDC:
                                 .dseg 
000100                           	dtxt: .BYTE 4 ;allocation
000104                           	twoDigit: .BYTE 3
                                 .cseg
000164 2fb4                      	mov dd8u, value
000165 e0c2                      	ldi dv8u, 2
000166 d02c                      	rcall div8u
                                 
000167 36b4                      	cpi dres8u, 100
000168 f071                      	breq onehundred
                                 
000169 e0d0                      	ldi r29, 0x00
00016a 93d0 0106                 	sts	twoDigit+2, r29	; load in terminating null byte
                                 
                                 	; ones place
00016c e0ca                      	ldi dv8u, 10
00016d d025                      	rcall div8u			
00016e e3d0                      	ldi r29, 0x30
00016f 0fad                      	add drem8u, r29
000170 93a0 0105                 	sts twoDigit+1, drem8u
                                 	
                                 	; tens place 
000172 d020                      	rcall div8u
000173 0fad                      	add drem8u, r29
000174 93a0 0104                 	sts twoDigit, drem8u
000176 c00e                      	rjmp read
                                 
                                 onehundred:
000177 e0d0                      	ldi		r29, 0x00
000178 93d0 0103                 	sts		dtxt+3, r29
00017a e320                      	ldi		temp, 0x30
00017b 9320 0102                 	sts		dtxt+2, temp
00017d 9320 0101                 	sts		dtxt+1, temp
00017f e321                      	ldi		temp, 0x31
000180 9320 0100                 	sts		dtxt, temp
                                 
                                 readhundred:
000182 e0e0                      	ldi r30, LOW(dtxt)
000183 e0f1                      	ldi r31, HIGH(dtxt)
000184 c003                      	rjmp displayDString
                                 
                                 read:
000185 e0e4                      	ldi r30, LOW(twoDigit)
000186 e0f1                      	ldi r31, HIGH(twoDigit)
000187 c000                      	rjmp displayDString
                                 
                                 displayDstring:
000188 9001                      	ld r0,Z+
000189 2000                      	tst r0 ; Reached end of message ?
00018a f039                      	breq done_dsd ; Yes => quit
00018b 9402                      	swap r0 ; Upper nibble in place
00018c b808                      	out PORTC,r0 ; Send upper nibble out
00018d df7f                      	rcall LCDStrobe ; Latch nibble 
00018e 9402                      	swap r0 ; Lower nibble in place
00018f b808                      	out PORTC,r0 ; Send lower nibble out
000190 df7c                      	rcall LCDStrobe ; Latch nibble
000191 cff6                      	rjmp displayDString
                                 
                                 done_dsd:
000192 9508                      	ret
                                 	
                                 div8u:	
000193 1baa                      	sub	drem8u,drem8u	;clear remainder and carry
000194 1fbb                      	rol	dd8u		;shift left dividend
000195 1faa                      	rol	drem8u		;shift dividend into remainder
000196 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
000197 f418                      	brcc	d8u_1		;if result negative
000198 0fac                      	add	drem8u,dv8u	;    restore remainder
000199 9488                      	clc			;    clear carry to be shifted into result
00019a c001                      	rjmp	d8u_2		;else
00019b 9408                      d8u_1:	sec			;    set carry to be shifted into result
                                 
                                 d8u_2:	
00019c 1fbb                      	rol	dd8u		;shift left dividend
00019d 1faa                      	rol	drem8u		;shift dividend into remainder
00019e 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
00019f f418                      	brcc	d8u_3		;if result negative
0001a0 0fac                      	add	drem8u,dv8u	;    restore remainder
0001a1 9488                      	clc			;    clear carry to be shifted into result
0001a2 c001                      	rjmp	d8u_4		;else
0001a3 9408                      d8u_3:	sec			;    set carry to be shifted into result
                                 
                                 d8u_4:	
0001a4 1fbb                      	rol	dd8u		;shift left dividend
0001a5 1faa                      	rol	drem8u		;shift dividend into remainder
0001a6 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
0001a7 f418                      	brcc	d8u_5		;if result negative
0001a8 0fac                      	add	drem8u,dv8u	;    restore remainder
0001a9 9488                      	clc			;    clear carry to be shifted into result
0001aa c001                      	rjmp	d8u_6		;else
                                 
0001ab 9408                      d8u_5:	sec			;    set carry to be shifted into result
                                 
0001ac 1fbb                      d8u_6:	rol	dd8u		;shift left dividend
0001ad 1faa                      	rol	drem8u		;shift dividend into remainder
0001ae 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
0001af f418                      	brcc	d8u_7		;if result negative
0001b0 0fac                      	add	drem8u,dv8u	;    restore remainder
0001b1 9488                      	clc			;    clear carry to be shifted into result
0001b2 c001                      	rjmp	d8u_8		;else
                                 
0001b3 9408                      d8u_7:	sec			;    set carry to be shifted into result
                                 
0001b4 1fbb                      d8u_8:	rol	dd8u		;shift left dividend
0001b5 1faa                      	rol	drem8u		;shift dividend into remainder
0001b6 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
0001b7 f418                      	brcc	d8u_9		;if result negative
0001b8 0fac                      	add	drem8u,dv8u	;    restore remainder
0001b9 9488                      	clc			;    clear carry to be shifted into result
0001ba c001                      	rjmp	d8u_10		;else
0001bb 9408                      d8u_9:	sec			;    set carry to be shifted into result
                                 
0001bc 1fbb                      d8u_10:	rol	dd8u		;shift left dividend
0001bd 1faa                      	rol	drem8u		;shift dividend into remainder
0001be 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
0001bf f418                      	brcc	d8u_11		;if result negative
0001c0 0fac                      	add	drem8u,dv8u	;    restore remainder
0001c1 9488                      	clc			;    clear carry to be shifted into result
0001c2 c001                      	rjmp	d8u_12		;else
0001c3 9408                      d8u_11:	sec			;    set carry to be shifted into result
                                 
0001c4 1fbb                      d8u_12:	rol	dd8u		;shift left dividend
0001c5 1faa                      	rol	drem8u		;shift dividend into remainder
0001c6 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
0001c7 f418                      	brcc	d8u_13		;if result negative
0001c8 0fac                      	add	drem8u,dv8u	;    restore remainder
0001c9 9488                      	clc			;    clear carry to be shifted into result
0001ca c001                      	rjmp	d8u_14		;else
0001cb 9408                      d8u_13:	sec			;    set carry to be shifted into result
                                 
0001cc 1fbb                      d8u_14:	rol	dd8u		;shift left dividend
0001cd 1faa                      	rol	drem8u		;shift dividend into remainder
0001ce 1bac                      	sub	drem8u,dv8u	;remainder = remainder - divisor
0001cf f418                      	brcc	d8u_15		;if result negative
0001d0 0fac                      	add	drem8u,dv8u	;    restore remainder
0001d1 9488                      	clc			;    clear carry to be shifted into result
0001d2 c001                      	rjmp	d8u_16		;else
0001d3 9408                      d8u_15:	sec			;    set carry to be shifted into result
                                 
0001d4 1fbb                      d8u_16:	rol	dd8u		;shift left dividend
0001d5 9508                      	ret
                                 
                                 delay_mms:
0001d6 e021                      	ldi		temp, (1 << TOIE0)
0001d7 9320 006e                 	sts		TIMSK0, temp		; enable TOV interrupts 
                                 	delayLoop:
0001d9 950a                      		dec r16
0001da d006                      		rcall delay_ms
0001db 3000                      		cpi r16, 0
0001dc f7e1                      		brne delayLoop
0001dd e020                      	ldi		temp, (0 << TOIE0)	; disable TOV interrupts
0001de 9320 006e                 	sts		TIMSK0, temp
0001e0 9508                      	ret
                                 
                                  delay_ms: 
0001e1 932f                      	push	temp
0001e2 e026                      	ldi		temp, 6
0001e3 bd26                      	out		TCNT0, temp
                                 
0001e4 e021                      	ldi		temp, (1 << TOIE0)
0001e5 9320 006e                 	sts		TIMSK0, temp		; enable TOV interrupts 
                                 	wait: 
0001e7 9ba8                      		sbis	TIFR0, TOV0
0001e8 cffe                      		rjmp	wait
                                 	
0001e9 e021                      	ldi		temp, (1 << TOV0)
0001ea bb25                      	out		TIFR0, temp		; Clear TOV0 / clear pending interrupts 
0001eb e020                      	ldi		temp, (0 << TOIE0)	; disable TOV interrupts
0001ec 9320 006e                 	sts		TIMSK0, temp
0001ee 912f                      	pop		temp 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :   0 z  :   1 r0 :  10 r1 :   0 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   2 r16:  14 r17:  38 r18:  78 r19:   4 r20:  10 
r21:   0 r22:   3 r23:   0 r24:  15 r25:   2 r26:  30 r27:  11 r28:  18 
r29:   7 r30:   7 r31:   7 
Registers used: 17 out of 35 (48.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :  11 adiw  :   1 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   8 brcs  :   0 break :   0 breq  :   5 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   7 cbr   :   0 
clc   :   8 clh   :   0 cli   :   5 cln   :   0 clr   :   2 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   6 cpse  :   0 dec   :   2 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   1 jmp   :   1 
ld    :   1 ldd   :   0 ldi   :  89 lds   :   0 lpm   :   3 lsl   :   2 
lsr   :   0 mov   :   4 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  18 or    :   1 ori   :   2 out   :  36 pop   :   2 
push  :   3 rcall :  76 ret   :  13 reti  :   1 rjmp  :  30 rol   :  17 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   5 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :   0 sbrc  :   3 sbrs  :   1 sec   :   8 seh   :   0 
sei   :   6 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :  27 
sub   :  10 subi  :   0 swap  :   4 tst   :   1 wdr   :   0 
Instructions used: 41 out of 113 (36.3%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003e0    902     32    934   32768   2.9%
[.dseg] 0x000100 0x000107      0      7      7    2048   0.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
